var __defProp=Object.defineProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});var __publicField=(obj,key,value)=>__defNormalProp(obj,typeof key!="symbol"?key+"":key,value);const _Color=class _Color{constructor(_r,_g,_b,_a){this._r=_r,this._g=_g,this._b=_b,this._a=_a}get r(){return this._r}get g(){return this._g}get b(){return this._b}get rgbString(){return"rgb("+[this._r,this._g,this._b,this._a].filter(v=>v!==void 0).join(",")+")"}get rgbArray(){return this._a?[this._r,this._g,this._b,this._a]:[this._r,this._g,this._b]}get rgb(){return{r:this._r,g:this._g,b:this._b,a:this._a}}get hex(){return"#"+this._r.toString(16).padStart(2,"0")+this._g.toString(16).padStart(2,"0")+this._b.toString(16).padStart(2,"0")+(this._a?Math.floor(255*this._a).toString(16).padStart(2,"0"):"")}set hex(hex){const color=_Color.fromHex(hex);this._r=color._r,this._g=color._g,this._b=color._b,this._a=color._a}get skribblCode(){const skribblIndex=_Color.skribblColors.findIndex(c=>c[0]===this._r&&c[1]===this._g&&c[2]===this._b);return skribblIndex!==-1?skribblIndex:this.typoCode}get typoCode(){const hexString=(this._r<<16|this._g<<8|this._b).toString(16).toUpperCase();return parseInt(hexString,16)+1e4}get hsl(){const r=this.r/255,g=this.g/255,b=this.b/255,max=Math.max(r,g,b),min=Math.min(r,g,b);let h=0,s=0;const l=(max+min)/2;if(max==min)h=s=0;else{const d=max-min;switch(s=l>.5?d/(2-max-min):d/(max+min),max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break}h/=6}return this._a!==void 0?[h*360,s*100,l*100,this._a]:[h*360,s*100,l*100]}get hsv(){const r=this.r/255,g=this.g/255,b=this.b/255,max=Math.max(r,g,b),min=Math.min(r,g,b),delta=max-min;let h=0,s=0;const v=max;if(max!==0?s=delta/max:(h=0,s=0),max!==min){switch(max){case r:h=(g-b)/delta+(g<b?6:0);break;case g:h=(b-r)/delta+2;break;case b:h=(r-g)/delta+4;break}h/=6}return[h*360,s*100,v*100,this._a]}static fromRgb(r,g,b,a){return new _Color(Math.round(r),Math.round(g),Math.round(b),a?Math.round(a*100)/100:void 0)}static fromHex(hex){hex[0]=="#"&&(hex=hex.substring(1));const r=Math.round(parseInt("0x"+hex.substring(0,2))),g=Math.round(parseInt("0x"+hex.substring(2,4))),b=Math.round(parseInt("0x"+hex.substring(4,6))),a=hex.length>6?Math.round(parseInt("0x"+hex.substring(6,8))):void 0;return new _Color(r,g,b,a)}static fromRgbString(rgb){const rgbs=rgb.trim().replace(" ","").split(","),r=parseInt(rgbs[0].replace(/[^\d]/g,""),10),g=parseInt(rgbs[1].replace(/[^\d]/g,""),10),b=parseInt(rgbs[2].replace(/[^\d]/g,""),10),a=rgbs.length>3?parseInt(rgbs[4].replace(/[^\d]/g,""),10):void 0;return new _Color(r,g,b,a)}static fromSkribblCode(code){if(code<1e4){const rgb=_Color.skribblColors[code];return _Color.fromRgb(rgb[0],rgb[1],rgb[2])}const hex=(code-1e4).toString(16).padStart(6,"0");return _Color.fromHex(hex)}static fromHsl(h,s,l,alpha){s/=100,l/=100;const k=__name(n=>(n+h/30)%12,"k"),a=s*Math.min(l,1-l),f=__name(n=>l-a*Math.max(-1,Math.min(k(n)-3,Math.min(9-k(n),1))),"f"),r=Math.round(f(0)*255),g=Math.round(f(8)*255),b=Math.round(f(4)*255);return new _Color(r,g,b,alpha)}static fromHsv(h,s,v,a){s/=100,v/=100;const c=v*s,x=c*(1-Math.abs(h/60%2-1)),m=v-c;let r=0,g=0,b=0;return 0<=h&&h<60?(r=c,g=x,b=0):60<=h&&h<120?(r=x,g=c,b=0):120<=h&&h<180?(r=0,g=c,b=x):180<=h&&h<240?(r=0,g=x,b=c):240<=h&&h<300?(r=x,g=0,b=c):300<=h&&h<360&&(r=c,g=0,b=x),r=Math.round((r+m)*255),g=Math.round((g+m)*255),b=Math.round((b+m)*255),new _Color(r,g,b,a)}copy(){return new _Color(this._r,this._g,this._b,this._a)}withAlpha(a){return this._a=a,this}};__name(_Color,"Color"),__publicField(_Color,"skribblColors",[[255,255,255],[0,0,0],[193,193,193],[80,80,80],[239,19,11],[116,11,7],[255,113,0],[194,56,0],[255,228,0],[232,162,0],[0,204,0],[0,70,25],[0,255,145],[0,120,93],[0,178,255],[0,86,158],[35,31,211],[14,8,101],[163,0,186],[85,0,105],[223,105,167],[135,53,84],[255,172,142],[204,119,77],[160,82,45],[99,48,13]]);let Color=_Color;const _TypedWorkerExecutor=class _TypedWorkerExecutor{constructor(workerUrl,_parent){__publicField(this,"_worker");this._parent=_parent,this._worker=new Worker(workerUrl,{type:"module"}),this._worker.addEventListener("message",event=>{const{type,methodName,args}=event.data;type==="notification"&&this._parent[methodName](...args)})}async run(methodName,...args){return new Promise(resolve=>{const messageId=Math.random().toString(36).slice(10);this._worker.addEventListener("message",event=>{event.data.messageId===messageId&&event.data.type==="result"&&resolve(event.data.result)}),this._worker.postMessage({methodName,args,messageId})})}};__name(_TypedWorkerExecutor,"TypedWorkerExecutor");let TypedWorkerExecutor=_TypedWorkerExecutor;const _TypedWorker=class _TypedWorker{constructor(worker){this.worker=worker,addEventListener("message",async event=>{const{methodName,args,messageId}=event.data,result=await this.worker[methodName](...args);postMessage({type:"result",messageId,result})})}send(methodName,...args){postMessage({type:"notification",methodName,args})}};__name(_TypedWorker,"TypedWorker");let TypedWorker=_TypedWorker;export{Color as C,TypedWorkerExecutor as T,TypedWorker as a};
//# sourceMappingURL=typed-worker.js.map
