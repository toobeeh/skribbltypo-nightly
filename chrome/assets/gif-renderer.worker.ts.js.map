{"version":3,"file":"gif-renderer.worker.ts.js","sources":["../../src/util/gif/canvasCommandProcessor.ts","../../node_modules/omggif/omggif.js","../../src/util/gif/gifEncoder.ts","../../src/util/gif/createGif.ts","../../src/worker/gif-renderer/gif-renderer.worker.ts"],"sourcesContent":["import { Color } from \"@/util/color\";\n\nexport class CanvasCommandProcessor {\n\n  private readonly _width: number;\n  private readonly _height: number;\n  private readonly _thicknessMin = 4;\n  private readonly _thicknessMax = 40;\n\n  constructor(private readonly _canvasContext: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D) {\n    this._width = _canvasContext.canvas.width;\n    this._height = _canvasContext.canvas.height;\n\n    this._canvasContext.fillStyle = \"white\";\n    this._canvasContext.fillRect(0, 0, this._width, this._height);\n  }\n\n  /**\n   * Skribbl comamnd interface\n   * @param command\n   * brush: [0, colorCode, size, x1, y1, x2, y2]\n   * fill: [1, colorCode, x, y]\n   *\n   */\n  public processDrawCommand(command: number[]){\n    if(command.length < 2){\n      throw new Error(\"Invalid command length smaller than 2\");\n    }\n\n    switch(command[0]){\n      case 0:\n        if(command.length < 7){\n          throw new Error(\"Invalid brush command length smaller than 7\");\n        }\n        this.drawLine(command[3], command[4], command[5], command[6], command[1], command[2]);\n        break;\n      case 1:\n        if(command.length < 4){\n          throw new Error(\"Invalid fill command length smaller than 4\");\n        }\n        this.floodFill(command[2], command[3], command[1]);\n        break;\n    }\n  }\n\n  public clear(){\n    this._canvasContext.clearRect(0, 0, this._width, this._height);\n  }\n\n  /**\n   * Exports current image as uint8clampedarray\n   */\n  public exportImage(){\n    return this._canvasContext.getImageData(0, 0, this._width, this._height).data;\n  }\n\n  private drawLine(x1: number, y1: number, x2: number, y2: number, color: number, size: number){\n\n    /*  ensure integer and in bounds */\n    size = (size < this._thicknessMin) ? this._thicknessMin : (size > this._thicknessMax) ? this._thicknessMax : Math.floor(size);\n\n    const rgb = Color.fromSkribblCode(color).rgb;\n    const radius = Math.ceil(size / 2);\n    const radiusSquared = radius * radius;\n\n    /* process coordinates just as skribbl */\n    let startX = this.clamp(Math.floor(x1), -radius, this._width + radius);\n    let startY = this.clamp(Math.floor(y1), -radius, this._height + radius);\n    let endX = this.clamp(Math.floor(x2), -radius, this._width + radius);\n    let endY = this.clamp(Math.floor(y2), -radius, this._height + radius);\n\n    const minX = Math.min(startX, endX) - radius;\n    const minY = Math.min(startY, endY) - radius;\n    const maxX = Math.max(startX, endX) + radius;\n    const maxY = Math.max(startY, endY) + radius;\n\n    startX -= minX;\n    startY -= minY;\n    endX -= minX;\n    endY -= minY;\n\n    const imageData = this._canvasContext.getImageData(minX, minY, maxX - minX, maxY - minY);\n\n    const applyBrush = (x: number, y: number) => {\n      for (let offsetX = -radius; offsetX <= radius; offsetX++) {\n        for (let offsetY = -radius; offsetY <= radius; offsetY++) {\n          if (offsetX * offsetX + offsetY * offsetY < radiusSquared) {\n            const pixelIndex = 4 * ((y + offsetY) * imageData.width + x + offsetX);\n            this.setPixel(imageData, pixelIndex, rgb.r, rgb.g, rgb.b);\n          }\n        }\n      }\n    };\n\n    if (startX === endX && startY === endY) {\n      applyBrush(startX, startY);\n    } else {\n      applyBrush(startX, startY);\n      applyBrush(endX, endY);\n\n      const deltaX = Math.abs(endX - startX);\n      const deltaY = Math.abs(endY - startY);\n      const stepX = startX < endX ? 1 : -1;\n      const stepY = startY < endY ? 1 : -1;\n      let error = deltaX - deltaY;\n\n      while (startX !== endX || startY !== endY) {\n        const doubleError = error * 2;\n        if (doubleError > -deltaY) {\n          error -= deltaY;\n          startX += stepX;\n        }\n        if (doubleError < deltaX) {\n          error += deltaX;\n          startY += stepY;\n        }\n        applyBrush(startX, startY);\n      }\n    }\n\n    this._canvasContext.putImageData(imageData, minX, minY);\n  }\n\n  private floodFill(x: number, y: number, color: number){\n    const imageData = this._canvasContext.getImageData(0, 0, this._width, this._height);\n    x = this.clamp(Math.floor(x), 0, this._width);\n    y = this.clamp(Math.floor(y), 0, this._height);\n    const fill = Color.fromSkribblCode(color).rgb;\n\n    const pixelStack = [[x, y]];\n    const targetColor = this.getPixel(imageData, x, y);\n\n    if (fill.r !== targetColor[0] || fill.g !== targetColor[1] || fill.b !== targetColor[2]) {\n      const isMatchingColor = (pixelIndex: number) => {\n        const r = imageData.data[pixelIndex];\n        const g = imageData.data[pixelIndex + 1];\n        const b = imageData.data[pixelIndex + 2];\n        return r === targetColor[0] && g === targetColor[1] && b === targetColor[2];\n      };\n\n      const width = imageData.width;\n      const height = imageData.height;\n\n      while (pixelStack.length > 0) {\n        // eslint-disable-next-line prefer-const\n        let [x, y] = pixelStack.pop() ??[-1,-1];\n        let pixelIndex = 4 * (y * width + x);\n\n        // Go up\n        while (y >= 0 && isMatchingColor(pixelIndex)) {\n          pixelIndex -= 4 * width;\n          y--;\n        }\n\n        // Go down\n        pixelIndex += 4 * width;\n        y++;\n        let leftSideFilled = false;\n        let rightSideFilled = false;\n\n        while (y < height && isMatchingColor(pixelIndex)) {\n          this.setPixel(imageData, pixelIndex, fill.r, fill.g, fill.b);\n\n          if (x > 0 && isMatchingColor(pixelIndex - 4)) {\n            if (!leftSideFilled) {\n              pixelStack.push([x - 1, y]);\n              leftSideFilled = true;\n            }\n          } else if (leftSideFilled) {\n            leftSideFilled = false;\n          }\n\n          if (x < width - 1 && isMatchingColor(pixelIndex + 4)) {\n            if (!rightSideFilled) {\n              pixelStack.push([x + 1, y]);\n              rightSideFilled = true;\n            }\n          } else if (rightSideFilled) {\n            rightSideFilled = false;\n          }\n\n          pixelIndex += 4 * width;\n          y++;\n        }\n      }\n\n      this._canvasContext.putImageData(imageData, 0, 0);\n    }\n  }\n\n  private getPixel(imageData: ImageData, x: number, y: number){\n    const pixelIndex = 4 * (y * imageData.width + x);\n    if(pixelIndex < 0 || pixelIndex >= imageData.data.length) {\n      return [0, 0, 0];\n    }\n    return [imageData.data[pixelIndex], imageData.data[pixelIndex + 1], imageData.data[pixelIndex + 2]];\n  }\n\n  private setPixel(imageData: ImageData, index: number, r: number, g: number, b: number){\n    if(index < 0 || index >= imageData.data.length) return;\n    imageData.data[index] = r;\n    imageData.data[index + 1] = g;\n    imageData.data[index + 2] = b;\n    imageData.data[index + 3] = 255;\n  }\n\n  private clamp(value: number, min: number, max: number){\n    return Math.min(Math.max(value, min), max);\n  }\n\n}","// (c) Dean McNamee <dean@gmail.com>, 2013.\n//\n// https://github.com/deanm/omggif\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n//\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n// including animation and compression.  It does not rely on any specific\n// underlying system, so should run in the browser, Node, or Plask.\n\n\"use strict\";\n\nfunction GifWriter(buf, width, height, gopts) {\n  var p = 0;\n\n  var gopts = gopts === undefined ? { } : gopts;\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\n\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)\n    throw new Error(\"Width/Height invalid.\");\n\n  function check_palette_and_num_colors(palette) {\n    var num_colors = palette.length;\n    if (num_colors < 2 || num_colors > 256 ||  num_colors & (num_colors-1)) {\n      throw new Error(\n          \"Invalid code/color length, must be power of 2 and 2 .. 256.\");\n    }\n    return num_colors;\n  }\n\n  // - Header.\n  buf[p++] = 0x47; buf[p++] = 0x49; buf[p++] = 0x46;  // GIF\n  buf[p++] = 0x38; buf[p++] = 0x39; buf[p++] = 0x61;  // 89a\n\n  // Handling of Global Color Table (palette) and background index.\n  var gp_num_colors_pow2 = 0;\n  var background = 0;\n  if (global_palette !== null) {\n    var gp_num_colors = check_palette_and_num_colors(global_palette);\n    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;\n    gp_num_colors = 1 << gp_num_colors_pow2;\n    --gp_num_colors_pow2;\n    if (gopts.background !== undefined) {\n      background = gopts.background;\n      if (background >= gp_num_colors)\n        throw new Error(\"Background index out of range.\");\n      // The GIF spec states that a background index of 0 should be ignored, so\n      // this is probably a mistake and you really want to set it to another\n      // slot in the palette.  But actually in the end most browsers, etc end\n      // up ignoring this almost completely (including for dispose background).\n      if (background === 0)\n        throw new Error(\"Background index explicitly passed as 0.\");\n    }\n  }\n\n  // - Logical Screen Descriptor.\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n  buf[p++] = width & 0xff; buf[p++] = width >> 8 & 0xff;\n  buf[p++] = height & 0xff; buf[p++] = height >> 8 & 0xff;\n  // NOTE: Indicates 0-bpp original color resolution (unused?).\n  buf[p++] = (global_palette !== null ? 0x80 : 0) |  // Global Color Table Flag.\n             gp_num_colors_pow2;  // NOTE: No sort flag (unused?).\n  buf[p++] = background;  // Background Color Index.\n  buf[p++] = 0;  // Pixel aspect ratio (unused?).\n\n  // - Global Color Table\n  if (global_palette !== null) {\n    for (var i = 0, il = global_palette.length; i < il; ++i) {\n      var rgb = global_palette[i];\n      buf[p++] = rgb >> 16 & 0xff;\n      buf[p++] = rgb >> 8 & 0xff;\n      buf[p++] = rgb & 0xff;\n    }\n  }\n\n  if (loop_count !== null) {  // Netscape block for looping.\n    if (loop_count < 0 || loop_count > 65535)\n      throw new Error(\"Loop count invalid.\")\n    // Extension code, label, and length.\n    buf[p++] = 0x21; buf[p++] = 0xff; buf[p++] = 0x0b;\n    // NETSCAPE2.0\n    buf[p++] = 0x4e; buf[p++] = 0x45; buf[p++] = 0x54; buf[p++] = 0x53;\n    buf[p++] = 0x43; buf[p++] = 0x41; buf[p++] = 0x50; buf[p++] = 0x45;\n    buf[p++] = 0x32; buf[p++] = 0x2e; buf[p++] = 0x30;\n    // Sub-block\n    buf[p++] = 0x03; buf[p++] = 0x01;\n    buf[p++] = loop_count & 0xff; buf[p++] = loop_count >> 8 & 0xff;\n    buf[p++] = 0x00;  // Terminator.\n  }\n\n\n  var ended = false;\n\n  this.addFrame = function(x, y, w, h, indexed_pixels, opts) {\n    if (ended === true) { --p; ended = false; }  // Un-end.\n\n    opts = opts === undefined ? { } : opts;\n\n    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n    // canvas width/height, I imagine?\n    if (x < 0 || y < 0 || x > 65535 || y > 65535)\n      throw new Error(\"x/y invalid.\")\n\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)\n      throw new Error(\"Width/Height invalid.\")\n\n    if (indexed_pixels.length < w * h)\n      throw new Error(\"Not enough pixels for the frame size.\");\n\n    var using_local_palette = true;\n    var palette = opts.palette;\n    if (palette === undefined || palette === null) {\n      using_local_palette = false;\n      palette = global_palette;\n    }\n\n    if (palette === undefined || palette === null)\n      throw new Error(\"Must supply either a local or global palette.\");\n\n    var num_colors = check_palette_and_num_colors(palette);\n\n    // Compute the min_code_size (power of 2), destroying num_colors.\n    var min_code_size = 0;\n    while (num_colors >>= 1) ++min_code_size;\n    num_colors = 1 << min_code_size;  // Now we can easily get it back.\n\n    var delay = opts.delay === undefined ? 0 : opts.delay;\n\n    // From the spec:\n    //     0 -   No disposal specified. The decoder is\n    //           not required to take any action.\n    //     1 -   Do not dispose. The graphic is to be left\n    //           in place.\n    //     2 -   Restore to background color. The area used by the\n    //           graphic must be restored to the background color.\n    //     3 -   Restore to previous. The decoder is required to\n    //           restore the area overwritten by the graphic with\n    //           what was there prior to rendering the graphic.\n    //  4-7 -    To be defined.\n    // NOTE(deanm): Dispose background doesn't really work, apparently most\n    // browsers ignore the background palette index and clear to transparency.\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n    if (disposal < 0 || disposal > 3)  // 4-7 is reserved.\n      throw new Error(\"Disposal out of range.\");\n\n    var use_transparency = false;\n    var transparent_index = 0;\n    if (opts.transparent !== undefined && opts.transparent !== null) {\n      use_transparency = true;\n      transparent_index = opts.transparent;\n      if (transparent_index < 0 || transparent_index >= num_colors)\n        throw new Error(\"Transparent color index.\");\n    }\n\n    if (disposal !== 0 || use_transparency || delay !== 0) {\n      // - Graphics Control Extension\n      buf[p++] = 0x21; buf[p++] = 0xf9;  // Extension / Label.\n      buf[p++] = 4;  // Byte size.\n\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\n      buf[p++] = delay & 0xff; buf[p++] = delay >> 8 & 0xff;\n      buf[p++] = transparent_index;  // Transparent color index.\n      buf[p++] = 0;  // Block Terminator.\n    }\n\n    // - Image Descriptor\n    buf[p++] = 0x2c;  // Image Seperator.\n    buf[p++] = x & 0xff; buf[p++] = x >> 8 & 0xff;  // Left.\n    buf[p++] = y & 0xff; buf[p++] = y >> 8 & 0xff;  // Top.\n    buf[p++] = w & 0xff; buf[p++] = w >> 8 & 0xff;\n    buf[p++] = h & 0xff; buf[p++] = h >> 8 & 0xff;\n    // NOTE: No sort flag (unused?).\n    // TODO(deanm): Support interlace.\n    buf[p++] = using_local_palette === true ? (0x80 | (min_code_size-1)) : 0;\n\n    // - Local Color Table\n    if (using_local_palette === true) {\n      for (var i = 0, il = palette.length; i < il; ++i) {\n        var rgb = palette[i];\n        buf[p++] = rgb >> 16 & 0xff;\n        buf[p++] = rgb >> 8 & 0xff;\n        buf[p++] = rgb & 0xff;\n      }\n    }\n\n    p = GifWriterOutputLZWCodeStream(\n            buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\n\n    return p;\n  };\n\n  this.end = function() {\n    if (ended === false) {\n      buf[p++] = 0x3b;  // Trailer.\n      ended = true;\n    }\n    return p;\n  };\n\n  this.getOutputBuffer = function() { return buf; };\n  this.setOutputBuffer = function(v) { buf = v; };\n  this.getOutputBufferPosition = function() { return p; };\n  this.setOutputBufferPosition = function(v) { p = v; };\n}\n\n// Main compression routine, palette indexes -> LZW code stream.\n// |index_stream| must have at least one entry.\nfunction GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n  buf[p++] = min_code_size;\n  var cur_subblock = p++;  // Pointing at the length field.\n\n  var clear_code = 1 << min_code_size;\n  var code_mask = clear_code - 1;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  var cur_shift = 0;\n  // We have at most 12-bit codes, so we should have to hold a max of 19\n  // bits here (and then we would write out).\n  var cur = 0;\n\n  function emit_bytes_to_buffer(bit_block_size) {\n    while (cur_shift >= bit_block_size) {\n      buf[p++] = cur & 0xff;\n      cur >>= 8; cur_shift -= 8;\n      if (p === cur_subblock + 256) {  // Finished a subblock.\n        buf[cur_subblock] = 255;\n        cur_subblock = p++;\n      }\n    }\n  }\n\n  function emit_code(c) {\n    cur |= c << cur_shift;\n    cur_shift += cur_code_size;\n    emit_bytes_to_buffer(8);\n  }\n\n  // I am not an expert on the topic, and I don't want to write a thesis.\n  // However, it is good to outline here the basic algorithm and the few data\n  // structures and optimizations here that make this implementation fast.\n  // The basic idea behind LZW is to build a table of previously seen runs\n  // addressed by a short id (herein called output code).  All data is\n  // referenced by a code, which represents one or more values from the\n  // original input stream.  All input bytes can be referenced as the same\n  // value as an output code.  So if you didn't want any compression, you\n  // could more or less just output the original bytes as codes (there are\n  // some details to this, but it is the idea).  In order to achieve\n  // compression, values greater then the input range (codes can be up to\n  // 12-bit while input only 8-bit) represent a sequence of previously seen\n  // inputs.  The decompressor is able to build the same mapping while\n  // decoding, so there is always a shared common knowledge between the\n  // encoding and decoder, which is also important for \"timing\" aspects like\n  // how to handle variable bit width code encoding.\n  //\n  // One obvious but very important consequence of the table system is there\n  // is always a unique id (at most 12-bits) to map the runs.  'A' might be\n  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\n  // can be used for an effecient lookup strategy for the code mapping.  We\n  // need to know if a run has been seen before, and be able to map that run\n  // to the output code.  Since we start with known unique ids (input bytes),\n  // and then from those build more unique ids (table entries), we can\n  // continue this chain (almost like a linked list) to always have small\n  // integer values that represent the current byte chains in the encoder.\n  // This means instead of tracking the input bytes (AAAABCD) to know our\n  // current state, we can track the table entry for AAAABC (it is guaranteed\n  // to exist by the nature of the algorithm) and the next character D.\n  // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n  // unique.  This allows us to create a simple lookup key for mapping input\n  // sequences to codes (table indices) without having to store or search\n  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\n  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\n  // key.  This leads to a integer value at most 20-bits, which can always\n  // fit in an SMI value and be used as a fast sparse array / object key.\n\n  // Output code for the current contents of the index buffer.\n  var ib_code = index_stream[0] & code_mask;  // Load first input index.\n  var code_table = { };  // Key'd on our 20-bit \"tuple\".\n\n  emit_code(clear_code);  // Spec says first code should be a clear code.\n\n  // First index already loaded, process the rest of the stream.\n  for (var i = 1, il = index_stream.length; i < il; ++i) {\n    var k = index_stream[i] & code_mask;\n    var cur_key = ib_code << 8 | k;  // (prev, k) unique tuple.\n    var cur_code = code_table[cur_key];  // buffer + k.\n\n    // Check if we have to create a new code table entry.\n    if (cur_code === undefined) {  // We don't have buffer + k.\n      // Emit index buffer (without k).\n      // This is an inline version of emit_code, because this is the core\n      // writing routine of the compressor (and V8 cannot inline emit_code\n      // because it is a closure here in a different context).  Additionally\n      // we can call emit_byte_to_buffer less often, because we can have\n      // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n      // be 12-bits, so can safely have 18-bits there without overflow.\n      // emit_code(ib_code);\n      cur |= ib_code << cur_shift;\n      cur_shift += cur_code_size;\n      while (cur_shift >= 8) {\n        buf[p++] = cur & 0xff;\n        cur >>= 8; cur_shift -= 8;\n        if (p === cur_subblock + 256) {  // Finished a subblock.\n          buf[cur_subblock] = 255;\n          cur_subblock = p++;\n        }\n      }\n\n      if (next_code === 4096) {  // Table full, need a clear.\n        emit_code(clear_code);\n        next_code = eoi_code + 1;\n        cur_code_size = min_code_size + 1;\n        code_table = { };\n      } else {  // Table not full, insert a new entry.\n        // Increase our variable bit code sizes if necessary.  This is a bit\n        // tricky as it is based on \"timing\" between the encoding and\n        // decoder.  From the encoders perspective this should happen after\n        // we've already emitted the index buffer and are about to create the\n        // first table entry that would overflow our current code bit size.\n        if (next_code >= (1 << cur_code_size)) ++cur_code_size;\n        code_table[cur_key] = next_code++;  // Insert into code table.\n      }\n\n      ib_code = k;  // Index buffer to single input k.\n    } else {\n      ib_code = cur_code;  // Index buffer to sequence in code table.\n    }\n  }\n\n  emit_code(ib_code);  // There will still be something in the index buffer.\n  emit_code(eoi_code);  // End Of Information.\n\n  // Flush / finalize the sub-blocks stream to the buffer.\n  emit_bytes_to_buffer(1);\n\n  // Finish the sub-blocks, writing out any unfinished lengths and\n  // terminating with a sub-block of length 0.  If we have already started\n  // but not yet used a sub-block it can just become the terminator.\n  if (cur_subblock + 1 === p) {  // Started but unused.\n    buf[cur_subblock] = 0;\n  } else {  // Started and used, write length and additional terminator block.\n    buf[cur_subblock] = p - cur_subblock - 1;\n    buf[p++] = 0;\n  }\n  return p;\n}\n\nfunction GifReader(buf) {\n  var p = 0;\n\n  // - Header (GIF87a or GIF89a).\n  if (buf[p++] !== 0x47 ||            buf[p++] !== 0x49 || buf[p++] !== 0x46 ||\n      buf[p++] !== 0x38 || (buf[p++]+1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {\n    throw new Error(\"Invalid GIF 87a/89a header.\");\n  }\n\n  // - Logical Screen Descriptor.\n  var width = buf[p++] | buf[p++] << 8;\n  var height = buf[p++] | buf[p++] << 8;\n  var pf0 = buf[p++];  // <Packed Fields>.\n  var global_palette_flag = pf0 >> 7;\n  var num_global_colors_pow2 = pf0 & 0x7;\n  var num_global_colors = 1 << (num_global_colors_pow2 + 1);\n  var background = buf[p++];\n  buf[p++];  // Pixel aspect ratio (unused?).\n\n  var global_palette_offset = null;\n  var global_palette_size   = null;\n\n  if (global_palette_flag) {\n    global_palette_offset = p;\n    global_palette_size = num_global_colors;\n    p += num_global_colors * 3;  // Seek past palette.\n  }\n\n  var no_eof = true;\n\n  var frames = [ ];\n\n  var delay = 0;\n  var transparent_index = null;\n  var disposal = 0;  // 0 - No disposal specified.\n  var loop_count = null;\n\n  this.width = width;\n  this.height = height;\n\n  while (no_eof && p < buf.length) {\n    switch (buf[p++]) {\n      case 0x21:  // Graphics Control Extension Block\n        switch (buf[p++]) {\n          case 0xff:  // Application specific block\n            // Try if it's a Netscape block (with animation loop counter).\n            if (buf[p   ] !== 0x0b ||  // 21 FF already read, check block size.\n                // NETSCAPE2.0\n                buf[p+1 ] == 0x4e && buf[p+2 ] == 0x45 && buf[p+3 ] == 0x54 &&\n                buf[p+4 ] == 0x53 && buf[p+5 ] == 0x43 && buf[p+6 ] == 0x41 &&\n                buf[p+7 ] == 0x50 && buf[p+8 ] == 0x45 && buf[p+9 ] == 0x32 &&\n                buf[p+10] == 0x2e && buf[p+11] == 0x30 &&\n                // Sub-block\n                buf[p+12] == 0x03 && buf[p+13] == 0x01 && buf[p+16] == 0) {\n              p += 14;\n              loop_count = buf[p++] | buf[p++] << 8;\n              p++;  // Skip terminator.\n            } else {  // We don't know what it is, just try to get past it.\n              p += 12;\n              while (true) {  // Seek through subblocks.\n                var block_size = buf[p++];\n                // Bad block size (ex: undefined from an out of bounds read).\n                if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n                if (block_size === 0) break;  // 0 size is terminator\n                p += block_size;\n              }\n            }\n            break;\n\n          case 0xf9:  // Graphics Control Extension\n            if (buf[p++] !== 0x4 || buf[p+4] !== 0)\n              throw new Error(\"Invalid graphics extension block.\");\n            var pf1 = buf[p++];\n            delay = buf[p++] | buf[p++] << 8;\n            transparent_index = buf[p++];\n            if ((pf1 & 1) === 0) transparent_index = null;\n            disposal = pf1 >> 2 & 0x7;\n            p++;  // Skip terminator.\n            break;\n\n          case 0xfe:  // Comment Extension.\n            while (true) {  // Seek through subblocks.\n              var block_size = buf[p++];\n              // Bad block size (ex: undefined from an out of bounds read).\n              if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n              if (block_size === 0) break;  // 0 size is terminator\n              // console.log(buf.slice(p, p+block_size).toString('ascii'));\n              p += block_size;\n            }\n            break;\n\n          default:\n            throw new Error(\n                \"Unknown graphic control label: 0x\" + buf[p-1].toString(16));\n        }\n        break;\n\n      case 0x2c:  // Image Descriptor.\n        var x = buf[p++] | buf[p++] << 8;\n        var y = buf[p++] | buf[p++] << 8;\n        var w = buf[p++] | buf[p++] << 8;\n        var h = buf[p++] | buf[p++] << 8;\n        var pf2 = buf[p++];\n        var local_palette_flag = pf2 >> 7;\n        var interlace_flag = pf2 >> 6 & 1;\n        var num_local_colors_pow2 = pf2 & 0x7;\n        var num_local_colors = 1 << (num_local_colors_pow2 + 1);\n        var palette_offset = global_palette_offset;\n        var palette_size = global_palette_size;\n        var has_local_palette = false;\n        if (local_palette_flag) {\n          var has_local_palette = true;\n          palette_offset = p;  // Override with local palette.\n          palette_size = num_local_colors;\n          p += num_local_colors * 3;  // Seek past palette.\n        }\n\n        var data_offset = p;\n\n        p++;  // codesize\n        while (true) {\n          var block_size = buf[p++];\n          // Bad block size (ex: undefined from an out of bounds read).\n          if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n          if (block_size === 0) break;  // 0 size is terminator\n          p += block_size;\n        }\n\n        frames.push({x: x, y: y, width: w, height: h,\n                     has_local_palette: has_local_palette,\n                     palette_offset: palette_offset,\n                     palette_size: palette_size,\n                     data_offset: data_offset,\n                     data_length: p - data_offset,\n                     transparent_index: transparent_index,\n                     interlaced: !!interlace_flag,\n                     delay: delay,\n                     disposal: disposal});\n        break;\n\n      case 0x3b:  // Trailer Marker (end of file).\n        no_eof = false;\n        break;\n\n      default:\n        throw new Error(\"Unknown gif block: 0x\" + buf[p-1].toString(16));\n        break;\n    }\n  }\n\n  this.numFrames = function() {\n    return frames.length;\n  };\n\n  this.loopCount = function() {\n    return loop_count;\n  };\n\n  this.frameInfo = function(frame_num) {\n    if (frame_num < 0 || frame_num >= frames.length)\n      throw new Error(\"Frame index out of range.\");\n    return frames[frame_num];\n  }\n\n  this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = b;\n        pixels[op++] = g;\n        pixels[op++] = r;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n\n  // I will go to copy and paste hell one day...\n  this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = r;\n        pixels[op++] = g;\n        pixels[op++] = b;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n}\n\nfunction GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n  var min_code_size = code_stream[p++];\n\n  var clear_code = 1 << min_code_size;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  // NOTE: This shares the same name as the encoder, but has a different\n  // meaning here.  Here this masks each code coming from the code stream.\n  var code_mask = (1 << cur_code_size) - 1;\n  var cur_shift = 0;\n  var cur = 0;\n\n  var op = 0;  // Output pointer.\n\n  var subblock_size = code_stream[p++];\n\n  // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n  // solve the fast mode / backing store uncertainty.\n  // var code_table = Array(4096);\n  var code_table = new Int32Array(4096);  // Can be signed, we only use 20 bits.\n\n  var prev_code = null;  // Track code-1.\n\n  while (true) {\n    // Read up to two bytes, making sure we always 12-bits for max sized code.\n    while (cur_shift < 16) {\n      if (subblock_size === 0) break;  // No more data to be read.\n\n      cur |= code_stream[p++] << cur_shift;\n      cur_shift += 8;\n\n      if (subblock_size === 1) {  // Never let it get to 0 to hold logic above.\n        subblock_size = code_stream[p++];  // Next subblock.\n      } else {\n        --subblock_size;\n      }\n    }\n\n    // TODO(deanm): We should never really get here, we should have received\n    // and EOI.\n    if (cur_shift < cur_code_size)\n      break;\n\n    var code = cur & code_mask;\n    cur >>= cur_code_size;\n    cur_shift -= cur_code_size;\n\n    // TODO(deanm): Maybe should check that the first code was a clear code,\n    // at least this is what you're supposed to do.  But actually our encoder\n    // now doesn't emit a clear code first anyway.\n    if (code === clear_code) {\n      // We don't actually have to clear the table.  This could be a good idea\n      // for greater error checking, but we don't really do any anyway.  We\n      // will just track it with next_code and overwrite old entries.\n\n      next_code = eoi_code + 1;\n      cur_code_size = min_code_size + 1;\n      code_mask = (1 << cur_code_size) - 1;\n\n      // Don't update prev_code ?\n      prev_code = null;\n      continue;\n    } else if (code === eoi_code) {\n      break;\n    }\n\n    // We have a similar situation as the decoder, where we want to store\n    // variable length entries (code table entries), but we want to do in a\n    // faster manner than an array of arrays.  The code below stores sort of a\n    // linked list within the code table, and then \"chases\" through it to\n    // construct the dictionary entries.  When a new entry is created, just the\n    // last byte is stored, and the rest (prefix) of the entry is only\n    // referenced by its table entry.  Then the code chases through the\n    // prefixes until it reaches a single byte code.  We have to chase twice,\n    // first to compute the length, and then to actually copy the data to the\n    // output (backwards, since we know the length).  The alternative would be\n    // storing something in an intermediate stack, but that doesn't make any\n    // more sense.  I implemented an approach where it also stored the length\n    // in the code table, although it's a bit tricky because you run out of\n    // bits (12 + 12 + 8), but I didn't measure much improvements (the table\n    // entries are generally not the long).  Even when I created benchmarks for\n    // very long table entries the complexity did not seem worth it.\n    // The code table stores the prefix entry in 12 bits and then the suffix\n    // byte in 8 bits, so each entry is 20 bits.\n\n    var chase_code = code < next_code ? code : prev_code;\n\n    // Chase what we will output, either {CODE} or {CODE-1}.\n    var chase_length = 0;\n    var chase = chase_code;\n    while (chase > clear_code) {\n      chase = code_table[chase] >> 8;\n      ++chase_length;\n    }\n\n    var k = chase;\n\n    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n    if (op_end > output_length) {\n      console.log(\"Warning, gif stream longer than expected.\");\n      return;\n    }\n\n    // Already have the first byte from the chase, might as well write it fast.\n    output[op++] = k;\n\n    op += chase_length;\n    var b = op;  // Track pointer, writing backwards.\n\n    if (chase_code !== code)  // The case of emitting {CODE-1} + k.\n      output[op++] = k;\n\n    chase = chase_code;\n    while (chase_length--) {\n      chase = code_table[chase];\n      output[--b] = chase & 0xff;  // Write backwards.\n      chase >>= 8;  // Pull down to the prefix code.\n    }\n\n    if (prev_code !== null && next_code < 4096) {\n      code_table[next_code++] = prev_code << 8 | k;\n      // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n      // have an feeling that it should just happen somewhere else, for now it\n      // is awkward between when we grow past the max and then hit a clear code.\n      // For now just check if we hit the max 12-bits (then a clear code should\n      // follow, also of course encoded in 12-bits).\n      if (next_code >= code_mask+1 && cur_code_size < 12) {\n        ++cur_code_size;\n        code_mask = code_mask << 1 | 1;\n      }\n    }\n\n    prev_code = code;\n  }\n\n  if (op !== output_length) {\n    console.log(\"Warning, gif stream shorter than expected.\");\n  }\n\n  return output;\n}\n\n// CommonJS.\ntry { exports.GifWriter = GifWriter; exports.GifReader = GifReader } catch(e) {}\n","import { Color } from \"@/util/color\";\nimport { GifWriter } from \"omggif\";\n\nexport class GifEncoder {\n  private width = 800;\n  private height = 600;\n  private buffer: Uint8Array;\n  private gifWriter: GifWriter;\n  private frameCount = 0;\n  private colors: Map<string, { color: Color, index: number }>;\n\n  constructor(colorSet: Set<Color>, frameCount: number) {\n    this.buffer = new Uint8Array(this.width * this.height * 5 * frameCount);\n    this.gifWriter = new GifWriter(this.buffer, this.width, this.height, { loop: 1 });\n\n    const colorToKey = (color: Color) => color.rgbArray.slice(0,3).join(\",\");\n\n    const white = Color.fromRgb(255, 255, 255);\n    this.colors = new Map(\n      colorSet.values().map((color, index) => [color.rgbArray.slice(0,3).toString(), { color, index }]),\n    );\n\n    if(!this.colors.has(colorToKey(white))){\n      this.colors.set(colorToKey(white), { color: white, index: this.colors.size });\n    }\n\n    const nextPowerOfTwo = (n: number) => Math.pow(2, Math.ceil(Math.log2(n)));\n    const requiredSize = nextPowerOfTwo(this.colors.size);\n    if(this.colors.size < requiredSize){\n      const fill = new Array(requiredSize - this.colors.size).fill(white);\n      fill.forEach((color, index) => {\n        this.colors.set(`fill-${index}`, { color, index: this.colors.size });\n      });\n    }\n  }\n  \n  private get palette(){\n    return [...this.colors.values()].map(c => {\n      const rgb = c.color.rgbArray;\n      return rgb[2] | (rgb[1] << 8) | (rgb[0] << 16);\n    });\n  }\n\n  private mapToPaletteIndex(color: number[]){\n    return this.colors.get(color.toString())?.index ?? 0;\n  }\n\n  addFrame(imageData: Uint8ClampedArray, delayMs: number): void {\n\n    const palette = this.palette;\n    const indexedPixels = [];\n    for(let i = 0; i < imageData.length; i += 4){\n      const color = [imageData[i], imageData[i + 1], imageData[i + 2]];\n      indexedPixels.push(this.mapToPaletteIndex(color));\n    }\n\n    // Add frame to GIF\n    this.gifWriter.addFrame(0, 0, this.width, this.height, indexedPixels, {\n      delay: delayMs / 10,\n      palette: palette,\n      disposal: 2\n    });\n\n    this.frameCount++;\n  }\n\n  finalize(): Blob {\n    if (this.frameCount === 0) throw new Error(\"No frames added to the GIF.\");\n    const gifData = this.buffer.subarray(0, this.gifWriter.end());\n    return new Blob([gifData], { type: \"image/gif\" });\n  }\n}\n","import { Color } from \"@/util/color\";\nimport type { CanvasCommandProcessor } from \"@/util/gif/canvasCommandProcessor\";\nimport { GifEncoder } from \"@/util/gif/gifEncoder\";\n\n/**\n * Create a gif from skribbl commands\n * @param processor\n * @param commands\n * @param commandResolution\n * @param frameDelay\n * @param frameCount\n * @param onFrameRendered\n */\nexport function createGif(processor: CanvasCommandProcessor, commands: number[][], commandResolution: number, frameDelay: number, frameCount: number, onFrameRendered?: (currentIndex: number, totalIndex: number) => void){\n\n  const skribblColorCodes = new Set(commands.map(c => c[1]));\n  if(skribblColorCodes.size > 256){\n    throw new Error(\"Too many colors in the skribbl commands to render gif\");\n  }\n  const colorSet = new Set(skribblColorCodes.values().map(c => Color.fromSkribblCode(c)));\n  const gifEncoder = new GifEncoder(colorSet, frameCount);\n\n  for(let i = 0; i < commands.length; i++){\n    processor.processDrawCommand(commands[i]);\n    if(i % commandResolution === 0) {\n      const image = processor.exportImage();\n      gifEncoder.addFrame(image, frameDelay);\n      onFrameRendered?.(i, commands.length);\n    }\n  }\n\n  gifEncoder.addFrame(processor.exportImage(), 2000);\n  return gifEncoder.finalize();\n}","import { CanvasCommandProcessor } from \"@/util/gif/canvasCommandProcessor\";\nimport { createGif } from \"@/util/gif/createGif\";\nimport { TypedWorker, type TypedWorkerDefinition } from \"@/worker/typed-worker\";\n\n/**\n * Worker api definition\n */\nexport interface IGifRendererWorker extends TypedWorkerDefinition  {\n  renderGif(commands: number[][], duration: number): Blob;\n}\n\n/**\n * Parent callback definition\n */\nexport interface IGifRendererParent extends TypedWorkerDefinition {\n  frameRendered(frameIndex: number, totalFrames: number): void;\n}\n\n/**\n * Worker api implementation\n */\nexport const gifRendererWorker: IGifRendererWorker = {\n  renderGif(commands: number[][], duration: number) {\n    const offscreenCanvas = new OffscreenCanvas(800, 600);\n    const context = offscreenCanvas.getContext(\"2d\", {willReadFrequently: true});\n    if(!context) throw new Error(\"Failed to get 2d context\");\n    const processor = new CanvasCommandProcessor(context);\n\n    const frameDelay = 50;\n    const frameCount = Math.ceil(duration / frameDelay);\n    const commandResolution = Math.max(1,Math.floor(commands.length / frameCount));\n\n    const gif = createGif(processor, commands, commandResolution, frameDelay, frameCount, (frameIndex, totalFrames) => parent.send(\"frameRendered\", frameIndex, totalFrames));\n    return gif;\n  }\n};\n\n/* run worker when file is loaded; make sure only \"type\" imports are used in main context */\nconst parent = new TypedWorker<IGifRendererWorker, IGifRendererParent>(gifRendererWorker);"],"names":["x","y","i","il","rgb","palette_offset","GifWriter"],"mappings":"6YAEO,MAAM,wBAAN,MAAM,uBAAuB,CAOlC,YAA6B,eAA8E,CAL1F,6BACA,8BACA,mCAAgB,GAChB,mCAAgB,IAEJ,KAAA,eAAA,eACtB,KAAA,OAAS,eAAe,OAAO,MAC/B,KAAA,QAAU,eAAe,OAAO,OAErC,KAAK,eAAe,UAAY,QAChC,KAAK,eAAe,SAAS,EAAG,EAAG,KAAK,OAAQ,KAAK,OAAO,CAC9D,CASO,mBAAmB,QAAkB,CACvC,GAAA,QAAQ,OAAS,EACZ,MAAA,IAAI,MAAM,uCAAuC,EAGlD,OAAA,QAAQ,CAAC,EAAE,CAChB,IAAK,GACA,GAAA,QAAQ,OAAS,EACZ,MAAA,IAAI,MAAM,6CAA6C,EAE/D,KAAK,SAAS,QAAQ,CAAC,EAAG,QAAQ,CAAC,EAAG,QAAQ,CAAC,EAAG,QAAQ,CAAC,EAAG,QAAQ,CAAC,EAAG,QAAQ,CAAC,CAAC,EACpF,MACF,IAAK,GACA,GAAA,QAAQ,OAAS,EACZ,MAAA,IAAI,MAAM,4CAA4C,EAEzD,KAAA,UAAU,QAAQ,CAAC,EAAG,QAAQ,CAAC,EAAG,QAAQ,CAAC,CAAC,EACjD,KACJ,CACF,CAEO,OAAO,CACZ,KAAK,eAAe,UAAU,EAAG,EAAG,KAAK,OAAQ,KAAK,OAAO,CAC/D,CAKO,aAAa,CACX,OAAA,KAAK,eAAe,aAAa,EAAG,EAAG,KAAK,OAAQ,KAAK,OAAO,EAAE,IAC3E,CAEQ,SAAS,GAAY,GAAY,GAAY,GAAY,MAAe,KAAa,CAG3F,KAAQ,KAAO,KAAK,cAAiB,KAAK,cAAiB,KAAO,KAAK,cAAiB,KAAK,cAAgB,KAAK,MAAM,IAAI,EAE5H,MAAM,IAAM,MAAM,gBAAgB,KAAK,EAAE,IACnC,OAAS,KAAK,KAAK,KAAO,CAAC,EAC3B,cAAgB,OAAS,OAG3B,IAAA,OAAS,KAAK,MAAM,KAAK,MAAM,EAAE,EAAG,CAAC,OAAQ,KAAK,OAAS,MAAM,EACjE,OAAS,KAAK,MAAM,KAAK,MAAM,EAAE,EAAG,CAAC,OAAQ,KAAK,QAAU,MAAM,EAClE,KAAO,KAAK,MAAM,KAAK,MAAM,EAAE,EAAG,CAAC,OAAQ,KAAK,OAAS,MAAM,EAC/D,KAAO,KAAK,MAAM,KAAK,MAAM,EAAE,EAAG,CAAC,OAAQ,KAAK,QAAU,MAAM,EAEpE,MAAM,KAAO,KAAK,IAAI,OAAQ,IAAI,EAAI,OAChC,KAAO,KAAK,IAAI,OAAQ,IAAI,EAAI,OAChC,KAAO,KAAK,IAAI,OAAQ,IAAI,EAAI,OAChC,KAAO,KAAK,IAAI,OAAQ,IAAI,EAAI,OAE5B,QAAA,KACA,QAAA,KACF,MAAA,KACA,MAAA,KAEF,MAAA,UAAY,KAAK,eAAe,aAAa,KAAM,KAAM,KAAO,KAAM,KAAO,IAAI,EAEjF,WAAa,QAAC,EAAW,IAAc,CAC3C,QAAS,QAAU,CAAC,OAAQ,SAAW,OAAQ,UAC7C,QAAS,QAAU,CAAC,OAAQ,SAAW,OAAQ,UAC7C,GAAI,QAAU,QAAU,QAAU,QAAU,cAAe,CACzD,MAAM,WAAa,IAAM,EAAI,SAAW,UAAU,MAAQ,EAAI,SACzD,KAAA,SAAS,UAAW,WAAY,IAAI,EAAG,IAAI,EAAG,IAAI,CAAC,CAC1D,CAEJ,EARiB,cAWf,GAAA,SAAW,MAAQ,SAAW,KAChC,WAAW,OAAQ,MAAM,MACpB,CACL,WAAW,OAAQ,MAAM,EACzB,WAAW,KAAM,IAAI,EAErB,MAAM,OAAS,KAAK,IAAI,KAAO,MAAM,EAC/B,OAAS,KAAK,IAAI,KAAO,MAAM,EAC/B,MAAQ,OAAS,KAAO,EAAI,GAC5B,MAAQ,OAAS,KAAO,EAAI,GAClC,IAAI,MAAQ,OAAS,OAEd,KAAA,SAAW,MAAQ,SAAW,MAAM,CACzC,MAAM,YAAc,MAAQ,EACxB,YAAc,CAAC,SACR,OAAA,OACC,QAAA,OAER,YAAc,SACP,OAAA,OACC,QAAA,OAEZ,WAAW,OAAQ,MAAM,CAC3B,CACF,CAEA,KAAK,eAAe,aAAa,UAAW,KAAM,IAAI,CACxD,CAEQ,UAAU,EAAW,EAAW,MAAc,CAC9C,MAAA,UAAY,KAAK,eAAe,aAAa,EAAG,EAAG,KAAK,OAAQ,KAAK,OAAO,EAC9E,EAAA,KAAK,MAAM,KAAK,MAAM,CAAC,EAAG,EAAG,KAAK,MAAM,EACxC,EAAA,KAAK,MAAM,KAAK,MAAM,CAAC,EAAG,EAAG,KAAK,OAAO,EAC7C,MAAM,KAAO,MAAM,gBAAgB,KAAK,EAAE,IAEpC,WAAa,CAAC,CAAC,EAAG,CAAC,CAAC,EACpB,YAAc,KAAK,SAAS,UAAW,EAAG,CAAC,EAEjD,GAAI,KAAK,IAAM,YAAY,CAAC,GAAK,KAAK,IAAM,YAAY,CAAC,GAAK,KAAK,IAAM,YAAY,CAAC,EAAG,CACjF,MAAA,gBAAkB,OAAC,YAAuB,CACxC,MAAA,EAAI,UAAU,KAAK,UAAU,EAC7B,EAAI,UAAU,KAAK,WAAa,CAAC,EACjC,EAAI,UAAU,KAAK,WAAa,CAAC,EAChC,OAAA,IAAM,YAAY,CAAC,GAAK,IAAM,YAAY,CAAC,GAAK,IAAM,YAAY,CAAC,CAAA,EAJpD,mBAOlB,MAAQ,UAAU,MAClB,OAAS,UAAU,OAElB,KAAA,WAAW,OAAS,GAAG,CAExB,GAAA,CAACA,GAAGC,EAAC,EAAI,WAAW,IAAI,GAAI,CAAC,GAAG,EAAE,EAClC,WAAa,GAAKA,GAAI,MAAQD,IAGlC,KAAOC,IAAK,GAAK,gBAAgB,UAAU,GACzC,YAAc,EAAI,MAClBA,KAIF,YAAc,EAAI,MAClBA,KACA,IAAI,eAAiB,GACjB,gBAAkB,GAEtB,KAAOA,GAAI,QAAU,gBAAgB,UAAU,GACxC,KAAA,SAAS,UAAW,WAAY,KAAK,EAAG,KAAK,EAAG,KAAK,CAAC,EAEvDD,GAAI,GAAK,gBAAgB,WAAa,CAAC,EACpC,iBACH,WAAW,KAAK,CAACA,GAAI,EAAGC,EAAC,CAAC,EACT,eAAA,IAEV,iBACQ,eAAA,IAGfD,GAAI,MAAQ,GAAK,gBAAgB,WAAa,CAAC,EAC5C,kBACH,WAAW,KAAK,CAACA,GAAI,EAAGC,EAAC,CAAC,EACR,gBAAA,IAEX,kBACS,gBAAA,IAGpB,YAAc,EAAI,MAClBA,IAEJ,CAEA,KAAK,eAAe,aAAa,UAAW,EAAG,CAAC,CAClD,CACF,CAEQ,SAAS,UAAsB,EAAW,EAAU,CAC1D,MAAM,WAAa,GAAK,EAAI,UAAU,MAAQ,GAC9C,OAAG,WAAa,GAAK,YAAc,UAAU,KAAK,OACzC,CAAC,EAAG,EAAG,CAAC,EAEV,CAAC,UAAU,KAAK,UAAU,EAAG,UAAU,KAAK,WAAa,CAAC,EAAG,UAAU,KAAK,WAAa,CAAC,CAAC,CACpG,CAEQ,SAAS,UAAsB,MAAe,EAAW,EAAW,EAAU,CACjF,MAAQ,GAAK,OAAS,UAAU,KAAK,SAC9B,UAAA,KAAK,KAAK,EAAI,EACd,UAAA,KAAK,MAAQ,CAAC,EAAI,EAClB,UAAA,KAAK,MAAQ,CAAC,EAAI,EAClB,UAAA,KAAK,MAAQ,CAAC,EAAI,IAC9B,CAEQ,MAAM,MAAe,IAAa,IAAY,CACpD,OAAO,KAAK,IAAI,KAAK,IAAI,MAAO,GAAG,EAAG,GAAG,CAC3C,CAEF,EAhNoC,yDAA7B,IAAM,uBAAN,8DC0BP,SAAS,UAAU,IAAK,MAAO,OAAQ,MAAO,CAC5C,IAAI,EAAI,EAEJ,MAAQ,QAAU,OAAY,CAAA,EAAM,MACpC,WAAa,MAAM,OAAS,OAAY,KAAO,MAAM,KACrD,eAAiB,MAAM,UAAY,OAAY,KAAO,MAAM,QAEhE,GAAI,OAAS,GAAK,QAAU,GAAK,MAAQ,OAAS,OAAS,MACzD,MAAM,IAAI,MAAM,uBAAuB,EAEzC,SAAS,6BAA6B,QAAS,CAC7C,IAAI,WAAa,QAAQ,OACzB,GAAI,WAAa,GAAK,WAAa,KAAQ,WAAc,WAAW,EAClE,MAAM,IAAI,MACN,6DAA6D,EAEnE,OAAO,UACR,CAPQ,oEAUT,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAC7C,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAG7C,IAAI,mBAAqB,EACrB,WAAa,EACjB,GAAI,iBAAmB,KAAM,CAE3B,QADI,cAAgB,6BAA6B,cAAc,EACxD,gBAAkB,GAAG,EAAE,mBAG9B,GAFA,cAAgB,GAAK,mBACrB,EAAE,mBACE,MAAM,aAAe,OAAW,CAElC,GADA,WAAa,MAAM,WACf,YAAc,cAChB,MAAM,IAAI,MAAM,gCAAgC,EAKlD,GAAI,aAAe,EACjB,MAAM,IAAI,MAAM,0CAA0C,CAC7D,CACF,CAaD,GATA,IAAI,GAAG,EAAI,MAAQ,IAAM,IAAI,GAAG,EAAI,OAAS,EAAI,IACjD,IAAI,GAAG,EAAI,OAAS,IAAM,IAAI,GAAG,EAAI,QAAU,EAAI,IAEnD,IAAI,GAAG,GAAK,iBAAmB,KAAO,IAAO,GAClC,mBACX,IAAI,GAAG,EAAI,WACX,IAAI,GAAG,EAAI,EAGP,iBAAmB,KACrB,QAAS,EAAI,EAAG,GAAK,eAAe,OAAQ,EAAI,GAAI,EAAE,EAAG,CACvD,IAAI,IAAM,eAAe,CAAC,EAC1B,IAAI,GAAG,EAAI,KAAO,GAAK,IACvB,IAAI,GAAG,EAAI,KAAO,EAAI,IACtB,IAAI,GAAG,EAAI,IAAM,GAClB,CAGH,GAAI,aAAe,KAAM,CACvB,GAAI,WAAa,GAAK,WAAa,MACjC,MAAM,IAAI,MAAM,qBAAqB,EAEvC,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,IAAM,IAAI,GAAG,EAAI,GAE7C,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAC9D,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAC9D,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,GAE7C,IAAI,GAAG,EAAI,EAAM,IAAI,GAAG,EAAI,EAC5B,IAAI,GAAG,EAAI,WAAa,IAAM,IAAI,GAAG,EAAI,YAAc,EAAI,IAC3D,IAAI,GAAG,EAAI,CACZ,CAGD,IAAI,MAAQ,GAEZ,KAAK,SAAW,SAAS,EAAG,EAAG,EAAG,EAAG,eAAgB,KAAM,CAOzD,GANI,QAAU,KAAQ,EAAE,EAAG,MAAQ,IAEnC,KAAO,OAAS,OAAY,CAAA,EAAM,KAI9B,EAAI,GAAK,EAAI,GAAK,EAAI,OAAS,EAAI,MACrC,MAAM,IAAI,MAAM,cAAc,EAEhC,GAAI,GAAK,GAAK,GAAK,GAAK,EAAI,OAAS,EAAI,MACvC,MAAM,IAAI,MAAM,uBAAuB,EAEzC,GAAI,eAAe,OAAS,EAAI,EAC9B,MAAM,IAAI,MAAM,uCAAuC,EAEzD,IAAI,oBAAsB,GACtB,QAAU,KAAK,QAMnB,GAL6B,SAAY,OACvC,oBAAsB,GACtB,QAAU,gBAGiB,SAAY,KACvC,MAAM,IAAI,MAAM,+CAA+C,EAMjE,QAJI,WAAa,6BAA6B,OAAO,EAGjD,cAAgB,EACb,aAAe,GAAG,EAAE,cAC3B,WAAa,GAAK,cAElB,IAAI,MAAQ,KAAK,QAAU,OAAY,EAAI,KAAK,MAe5C,SAAW,KAAK,WAAa,OAAY,EAAI,KAAK,SACtD,GAAI,SAAW,GAAK,SAAW,EAC7B,MAAM,IAAI,MAAM,wBAAwB,EAE1C,IAAI,iBAAmB,GACnB,kBAAoB,EACxB,GAAI,KAAK,cAAgB,QAAa,KAAK,cAAgB,OACzD,iBAAmB,GACnB,kBAAoB,KAAK,YACrB,kBAAoB,GAAK,mBAAqB,YAChD,MAAM,IAAI,MAAM,0BAA0B,EAyB9C,IAtBI,WAAa,GAAK,kBAAoB,QAAU,KAElD,IAAI,GAAG,EAAI,GAAM,IAAI,GAAG,EAAI,IAC5B,IAAI,GAAG,EAAI,EAEX,IAAI,GAAG,EAAI,UAAY,GAAK,mBAAqB,GAAO,EAAI,GAC5D,IAAI,GAAG,EAAI,MAAQ,IAAM,IAAI,GAAG,EAAI,OAAS,EAAI,IACjD,IAAI,GAAG,EAAI,kBACX,IAAI,GAAG,EAAI,GAIb,IAAI,GAAG,EAAI,GACX,IAAI,GAAG,EAAI,EAAI,IAAM,IAAI,GAAG,EAAI,GAAK,EAAI,IACzC,IAAI,GAAG,EAAI,EAAI,IAAM,IAAI,GAAG,EAAI,GAAK,EAAI,IACzC,IAAI,GAAG,EAAI,EAAI,IAAM,IAAI,GAAG,EAAI,GAAK,EAAI,IACzC,IAAI,GAAG,EAAI,EAAI,IAAM,IAAI,GAAG,EAAI,GAAK,EAAI,IAGzC,IAAI,GAAG,EAAI,sBAAwB,GAAQ,IAAQ,cAAc,EAAM,EAGnE,sBAAwB,GAC1B,QAASC,GAAI,EAAGC,IAAK,QAAQ,OAAQD,GAAIC,IAAI,EAAED,GAAG,CAChD,IAAIE,KAAM,QAAQF,EAAC,EACnB,IAAI,GAAG,EAAIE,MAAO,GAAK,IACvB,IAAI,GAAG,EAAIA,MAAO,EAAI,IACtB,IAAI,GAAG,EAAIA,KAAM,GAClB,CAGH,SAAI,6BACI,IAAK,EAAG,cAAgB,EAAI,EAAI,cAAe,cAAc,EAE9D,CACX,EAEE,KAAK,IAAM,UAAW,CACpB,OAAI,QAAU,KACZ,IAAI,GAAG,EAAI,GACX,MAAQ,IAEH,CACX,EAEE,KAAK,gBAAkB,UAAW,CAAE,OAAO,GAAI,EAC/C,KAAK,gBAAkB,SAAS,EAAG,CAAE,IAAM,GAC3C,KAAK,wBAA0B,UAAW,CAAE,OAAO,CAAE,EACrD,KAAK,wBAA0B,SAAS,EAAG,CAAE,EAAI,EACnD,CAhMS,8BAoMT,SAAS,6BAA6B,IAAK,EAAG,cAAe,aAAc,CACzE,IAAI,GAAG,EAAI,cACX,IAAI,aAAe,IAEf,WAAa,GAAK,cAClB,UAAY,WAAa,EACzB,SAAW,WAAa,EACxB,UAAY,SAAW,EAEvB,cAAgB,cAAgB,EAChC,UAAY,EAGZ,IAAM,EAEV,SAAS,qBAAqB,eAAgB,CAC5C,KAAO,WAAa,gBAClB,IAAI,GAAG,EAAI,IAAM,IACjB,MAAQ,EAAG,WAAa,EACpB,IAAM,aAAe,MACvB,IAAI,YAAY,EAAI,IACpB,aAAe,IAGpB,CATQ,oDAWT,SAAS,UAAU,EAAG,CACpB,KAAO,GAAK,UACZ,WAAa,cACb,qBAAqB,CAAC,CACvB,CAJQ,8BA4CT,IAAI,QAAU,aAAa,CAAC,EAAI,UAC5B,WAAa,CAAA,EAEjB,UAAU,UAAU,EAGpB,QAAS,EAAI,EAAG,GAAK,aAAa,OAAQ,EAAI,GAAI,EAAE,EAAG,CACrD,IAAI,EAAI,aAAa,CAAC,EAAI,UACtB,QAAU,SAAW,EAAI,EACzB,SAAW,WAAW,OAAO,EAGjC,GAAI,WAAa,OAAW,CAW1B,IAFA,KAAO,SAAW,UAClB,WAAa,cACN,WAAa,GAClB,IAAI,GAAG,EAAI,IAAM,IACjB,MAAQ,EAAG,WAAa,EACpB,IAAM,aAAe,MACvB,IAAI,YAAY,EAAI,IACpB,aAAe,KAIf,YAAc,MAChB,UAAU,UAAU,EACpB,UAAY,SAAW,EACvB,cAAgB,cAAgB,EAChC,WAAa,CAAA,IAOT,WAAc,GAAK,eAAgB,EAAE,cACzC,WAAW,OAAO,EAAI,aAGxB,QAAU,CAChB,MACM,QAAU,QAEb,CAED,iBAAU,OAAO,EACjB,UAAU,QAAQ,EAGlB,qBAAqB,CAAC,EAKlB,aAAe,IAAM,EACvB,IAAI,YAAY,EAAI,GAEpB,IAAI,YAAY,EAAI,EAAI,aAAe,EACvC,IAAI,GAAG,EAAI,GAEN,CACT,CA3IS,oEA6IT,SAAS,UAAU,IAAK,CACtB,IAAI,EAAI,EAGR,GAAI,IAAI,GAAG,IAAM,IAAmB,IAAI,GAAG,IAAM,IAAQ,IAAI,GAAG,IAAM,IAClE,IAAI,GAAG,IAAM,KAAS,IAAI,GAAG,EAAE,EAAI,OAAU,IAAQ,IAAI,GAAG,IAAM,GACpE,MAAM,IAAI,MAAM,6BAA6B,EAI/C,IAAI,MAAQ,IAAI,GAAG,EAAI,IAAI,GAAG,GAAK,EAC/B,OAAS,IAAI,GAAG,EAAI,IAAI,GAAG,GAAK,EAChC,IAAM,IAAI,GAAG,EACb,oBAAsB,KAAO,EAC7B,uBAAyB,IAAM,EAC/B,kBAAoB,GAAM,uBAAyB,EACtC,IAAI,GAAG,EACxB,IAAI,GAAG,EAEP,IAAI,sBAAwB,KACxB,oBAAwB,KAExB,sBACF,sBAAwB,EACxB,oBAAsB,kBACtB,GAAK,kBAAoB,GAG3B,IAAI,OAAS,GAET,OAAS,CAAA,EAET,MAAQ,EACR,kBAAoB,KACpB,SAAW,EACX,WAAa,KAKjB,IAHA,KAAK,MAAQ,MACb,KAAK,OAAS,OAEP,QAAU,EAAI,IAAI,QACvB,OAAQ,IAAI,GAAG,EAAC,CACd,IAAK,IACH,OAAQ,IAAI,GAAG,EAAC,CACd,IAAK,KAEH,GAAI,IAAI,CAAC,IAAS,IAEd,IAAI,EAAE,IAAO,IAAQ,IAAI,EAAE,CAAC,GAAM,IAAQ,IAAI,EAAE,CAAG,GAAI,IACvD,IAAI,EAAE,IAAO,IAAQ,IAAI,EAAE,CAAC,GAAM,IAAQ,IAAI,EAAE,CAAG,GAAI,IACvD,IAAI,EAAE,IAAO,IAAQ,IAAI,EAAE,CAAC,GAAM,IAAQ,IAAI,EAAE,CAAG,GAAI,IACvD,IAAI,EAAE,EAAE,GAAK,IAAQ,IAAI,EAAE,EAAE,GAAK,IAElC,IAAI,EAAE,EAAE,GAAK,GAAQ,IAAI,EAAE,EAAE,GAAK,GAAQ,IAAI,EAAE,EAAE,GAAK,EACzD,GAAK,GACL,WAAa,IAAI,GAAG,EAAI,IAAI,GAAG,GAAK,EACpC,QAGA,KADA,GAAK,KACQ,CACX,IAAI,WAAa,IAAI,GAAG,EAExB,GAAI,EAAE,YAAc,GAAI,MAAM,MAAM,oBAAoB,EACxD,GAAI,aAAe,EAAG,MACtB,GAAK,UACN,CAEH,MAEF,IAAK,KACH,GAAI,IAAI,GAAG,IAAM,GAAO,IAAI,EAAE,CAAC,IAAM,EACnC,MAAM,IAAI,MAAM,mCAAmC,EACrD,IAAI,IAAM,IAAI,GAAG,EACjB,MAAQ,IAAI,GAAG,EAAI,IAAI,GAAG,GAAK,EAC/B,kBAAoB,IAAI,GAAG,EACtB,IAAM,IAAU,kBAAoB,MACzC,SAAW,KAAO,EAAI,EACtB,IACA,MAEF,IAAK,KACH,OAAa,CACX,IAAI,WAAa,IAAI,GAAG,EAExB,GAAI,EAAE,YAAc,GAAI,MAAM,MAAM,oBAAoB,EACxD,GAAI,aAAe,EAAG,MAEtB,GAAK,UACN,CACD,MAEF,QACE,MAAM,IAAI,MACN,oCAAsC,IAAI,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAClE,CACD,MAEF,IAAK,IACH,IAAI,EAAI,IAAI,GAAG,EAAI,IAAI,GAAG,GAAK,EAC3B,EAAI,IAAI,GAAG,EAAI,IAAI,GAAG,GAAK,EAC3B,EAAI,IAAI,GAAG,EAAI,IAAI,GAAG,GAAK,EAC3B,EAAI,IAAI,GAAG,EAAI,IAAI,GAAG,GAAK,EAC3B,IAAM,IAAI,GAAG,EACb,mBAAqB,KAAO,EAC5B,eAAiB,KAAO,EAAI,EAC5B,sBAAwB,IAAM,EAC9B,iBAAmB,GAAM,sBAAwB,EACjD,eAAiB,sBACjB,aAAe,oBACf,kBAAoB,GACxB,GAAI,mBAAoB,CACtB,IAAI,kBAAoB,GACxB,eAAiB,EACjB,aAAe,iBACf,GAAK,iBAAmB,CACzB,CAED,IAAI,YAAc,EAGlB,IADA,MACa,CACX,IAAI,WAAa,IAAI,GAAG,EAExB,GAAI,EAAE,YAAc,GAAI,MAAM,MAAM,oBAAoB,EACxD,GAAI,aAAe,EAAG,MACtB,GAAK,UACN,CAED,OAAO,KAAK,CAAC,EAAM,EAAM,MAAO,EAAG,OAAQ,EAC9B,kBACA,eACA,aACA,YACA,YAAa,EAAI,YACjB,kBACA,WAAY,CAAC,CAAC,eACd,MACA,QAAkB,CAAC,EAChC,MAEF,IAAK,IACH,OAAS,GACT,MAEF,QACE,MAAM,IAAI,MAAM,wBAA0B,IAAI,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAElE,CAGH,KAAK,UAAY,UAAW,CAC1B,OAAO,OAAO,MAClB,EAEE,KAAK,UAAY,UAAW,CAC1B,OAAO,UACX,EAEE,KAAK,UAAY,SAAS,UAAW,CACnC,GAAI,UAAY,GAAK,WAAa,OAAO,OACvC,MAAM,IAAI,MAAM,2BAA2B,EAC7C,OAAO,OAAO,SAAS,CACxB,EAED,KAAK,uBAAyB,SAAS,UAAW,OAAQ,CACxD,IAAI,MAAQ,KAAK,UAAU,SAAS,EAChC,WAAa,MAAM,MAAQ,MAAM,OACjC,aAAe,IAAI,WAAW,UAAU,EAC5C,8BACI,IAAK,MAAM,YAAa,aAAc,UAAU,EACpD,IAAIC,gBAAiB,MAAM,eAKvB,MAAQ,MAAM,kBACd,QAAU,OAAM,MAAQ,KAK5B,IAAI,WAAc,MAAM,MACpB,YAAc,MAAQ,WACtB,MAAc,WAGd,OAAU,MAAM,EAAI,MAAS,MAAM,GAAK,EACxC,QAAU,MAAM,EAAI,MAAM,QAAU,MAAQ,MAAM,GAAK,EACvD,GAAQ,MAER,WAAa,YAAc,EAI3B,MAAM,aAAe,KACvB,YAAc,MAAQ,EAAI,GAK5B,QAFI,cAAgB,EAEX,EAAI,EAAG,GAAK,aAAa,OAAQ,EAAI,GAAI,EAAE,EAAG,CACrD,IAAI,MAAQ,aAAa,CAAC,EAa1B,GAXI,QAAU,IACZ,IAAM,WACN,MAAQ,WACJ,IAAM,QACR,WAAa,YAAc,EAAI,MAAQ,GAAK,cAAc,GAE1D,GAAK,OAAS,WAAa,cAAgB,eAAiB,GAC5D,gBAAkB,IAIlB,QAAU,MACZ,IAAM,MACD,CACL,IAAI,EAAI,IAAIA,gBAAiB,MAAQ,CAAC,EAClC,EAAI,IAAIA,gBAAiB,MAAQ,EAAI,CAAC,EACtC,EAAI,IAAIA,gBAAiB,MAAQ,EAAI,CAAC,EAC1C,OAAO,IAAI,EAAI,EACf,OAAO,IAAI,EAAI,EACf,OAAO,IAAI,EAAI,EACf,OAAO,IAAI,EAAI,GAChB,CACD,EAAE,KACH,CACL,EAGE,KAAK,uBAAyB,SAAS,UAAW,OAAQ,CACxD,IAAI,MAAQ,KAAK,UAAU,SAAS,EAChC,WAAa,MAAM,MAAQ,MAAM,OACjC,aAAe,IAAI,WAAW,UAAU,EAC5C,8BACI,IAAK,MAAM,YAAa,aAAc,UAAU,EACpD,IAAIA,gBAAiB,MAAM,eAKvB,MAAQ,MAAM,kBACd,QAAU,OAAM,MAAQ,KAK5B,IAAI,WAAc,MAAM,MACpB,YAAc,MAAQ,WACtB,MAAc,WAGd,OAAU,MAAM,EAAI,MAAS,MAAM,GAAK,EACxC,QAAU,MAAM,EAAI,MAAM,QAAU,MAAQ,MAAM,GAAK,EACvD,GAAQ,MAER,WAAa,YAAc,EAI3B,MAAM,aAAe,KACvB,YAAc,MAAQ,EAAI,GAK5B,QAFI,cAAgB,EAEX,EAAI,EAAG,GAAK,aAAa,OAAQ,EAAI,GAAI,EAAE,EAAG,CACrD,IAAI,MAAQ,aAAa,CAAC,EAa1B,GAXI,QAAU,IACZ,IAAM,WACN,MAAQ,WACJ,IAAM,QACR,WAAa,YAAc,EAAI,MAAQ,GAAK,cAAc,GAE1D,GAAK,OAAS,WAAa,cAAgB,eAAiB,GAC5D,gBAAkB,IAIlB,QAAU,MACZ,IAAM,MACD,CACL,IAAI,EAAI,IAAIA,gBAAiB,MAAQ,CAAC,EAClC,EAAI,IAAIA,gBAAiB,MAAQ,EAAI,CAAC,EACtC,EAAI,IAAIA,gBAAiB,MAAQ,EAAI,CAAC,EAC1C,OAAO,IAAI,EAAI,EACf,OAAO,IAAI,EAAI,EACf,OAAO,IAAI,EAAI,EACf,OAAO,IAAI,EAAI,GAChB,CACD,EAAE,KACH,CACL,CACA,CAtSS,8BAwST,SAAS,8BAA8B,YAAa,EAAG,OAAQ,cAAe,CAyB5E,QAxBI,cAAgB,YAAY,GAAG,EAE/B,WAAa,GAAK,cAClB,SAAW,WAAa,EACxB,UAAY,SAAW,EAEvB,cAAgB,cAAgB,EAGhC,WAAa,GAAK,eAAiB,EACnC,UAAY,EACZ,IAAM,EAEN,GAAK,EAEL,cAAgB,YAAY,GAAG,EAK/B,WAAa,IAAI,WAAW,IAAI,EAEhC,UAAY,OAEH,CAEX,KAAO,UAAY,IACb,gBAAkB,GAEtB,KAAO,YAAY,GAAG,GAAK,UAC3B,WAAa,EAET,gBAAkB,EACpB,cAAgB,YAAY,GAAG,EAE/B,EAAE,cAMN,GAAI,UAAY,cACd,MAEF,IAAI,KAAO,IAAM,UAOjB,GANA,MAAQ,cACR,WAAa,cAKT,OAAS,WAAY,CAKvB,UAAY,SAAW,EACvB,cAAgB,cAAgB,EAChC,WAAa,GAAK,eAAiB,EAGnC,UAAY,KACZ,QACN,SAAe,OAAS,SAClB,MA2BF,QALI,WAAa,KAAO,UAAY,KAAO,UAGvC,aAAe,EACf,MAAQ,WACL,MAAQ,YACb,MAAQ,WAAW,KAAK,GAAK,EAC7B,EAAE,aAGJ,IAAI,EAAI,MAEJ,OAAS,GAAK,cAAgB,aAAe,KAAO,EAAI,GAC5D,GAAI,OAAS,cAAe,CAC1B,QAAQ,IAAI,2CAA2C,EACvD,MACD,CAGD,OAAO,IAAI,EAAI,EAEf,IAAM,aACN,IAAI,EAAI,GAMR,IAJI,aAAe,OACjB,OAAO,IAAI,EAAI,GAEjB,MAAQ,WACD,gBACL,MAAQ,WAAW,KAAK,EACxB,OAAO,EAAE,CAAC,EAAI,MAAQ,IACtB,QAAU,EAGR,YAAc,MAAQ,UAAY,OACpC,WAAW,WAAW,EAAI,WAAa,EAAI,EAMvC,WAAa,UAAU,GAAK,cAAgB,KAC9C,EAAE,cACF,UAAY,WAAa,EAAI,IAIjC,UAAY,IACb,CAED,OAAI,KAAO,eACT,QAAQ,IAAI,4CAA4C,EAGnD,MACT,CA9IS,sEAiJT,GAAI,CAAE,YAAA,OAAA,UAAoB,UAAW,YAAiB,OAAA,UAAG,SAAW,MAAU,CAAA,CCnyBvE,MAAM,YAAN,MAAM,WAAW,CAQtB,YAAY,SAAsB,WAAoB,CAP9C,2BAAQ,KACR,4BAAS,KACT,6BACA,gCACA,gCAAa,GACb,6BAGD,KAAA,OAAS,IAAI,WAAW,KAAK,MAAQ,KAAK,OAAS,EAAI,UAAU,EACtE,KAAK,UAAY,IAAIC,YAAU,KAAK,OAAQ,KAAK,MAAO,KAAK,OAAQ,CAAE,KAAM,CAAG,CAAA,EAE1E,MAAA,WAAa,OAAC,OAAiB,MAAM,SAAS,MAAM,EAAE,CAAC,EAAE,KAAK,GAAG,EAApD,cAEb,MAAQ,MAAM,QAAQ,IAAK,IAAK,GAAG,EACzC,KAAK,OAAS,IAAI,IAChB,SAAS,SAAS,IAAI,CAAC,MAAO,QAAU,CAAC,MAAM,SAAS,MAAM,EAAE,CAAC,EAAE,SAAS,EAAG,CAAE,MAAO,KAAA,CAAO,CAAC,CAAA,EAG9F,KAAK,OAAO,IAAI,WAAW,KAAK,CAAC,GACnC,KAAK,OAAO,IAAI,WAAW,KAAK,EAAG,CAAE,MAAO,MAAO,MAAO,KAAK,OAAO,IAAM,CAAA,EAI9E,MAAM,aADiB,OAAC,GAAc,KAAK,IAAI,EAAG,KAAK,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,EAAlD,kBACa,KAAK,OAAO,IAAI,EACjD,KAAK,OAAO,KAAO,cACP,IAAI,MAAM,aAAe,KAAK,OAAO,IAAI,EAAE,KAAK,KAAK,EAC7D,QAAQ,CAAC,MAAO,QAAU,CACxB,KAAA,OAAO,IAAI,QAAQ,KAAK,GAAI,CAAE,MAAO,MAAO,KAAK,OAAO,IAAM,CAAA,CAAA,CACpE,CAEL,CAEA,IAAY,SAAS,CACZ,MAAA,CAAC,GAAG,KAAK,OAAO,QAAQ,EAAE,IAAS,GAAA,CAClC,MAAA,IAAM,EAAE,MAAM,SACb,OAAA,IAAI,CAAC,EAAK,IAAI,CAAC,GAAK,EAAM,IAAI,CAAC,GAAK,EAAA,CAC5C,CACH,CAEQ,kBAAkB,MAAgB,QACxC,QAAO,QAAK,OAAO,IAAI,MAAM,UAAU,IAAhC,eAAmC,QAAS,CACrD,CAEA,SAAS,UAA8B,QAAuB,CAE5D,MAAM,QAAU,KAAK,QACf,cAAgB,CAAA,EACtB,QAAQ,EAAI,EAAG,EAAI,UAAU,OAAQ,GAAK,EAAE,CAC1C,MAAM,MAAQ,CAAC,UAAU,CAAC,EAAG,UAAU,EAAI,CAAC,EAAG,UAAU,EAAI,CAAC,CAAC,EAC/D,cAAc,KAAK,KAAK,kBAAkB,KAAK,CAAC,CAClD,CAGK,KAAA,UAAU,SAAS,EAAG,EAAG,KAAK,MAAO,KAAK,OAAQ,cAAe,CACpE,MAAO,QAAU,GACjB,QACA,SAAU,CAAA,CACX,EAEI,KAAA,YACP,CAEA,UAAiB,CACf,GAAI,KAAK,aAAe,EAAS,MAAA,IAAI,MAAM,6BAA6B,EAClE,MAAA,QAAU,KAAK,OAAO,SAAS,EAAG,KAAK,UAAU,KAAK,EACrD,OAAA,IAAI,KAAK,CAAC,OAAO,EAAG,CAAE,KAAM,YAAa,CAClD,CACF,EApEwB,iCAAjB,IAAM,WAAN,YCUA,SAAS,UAAU,UAAmC,SAAsB,kBAA2B,WAAoB,WAAoB,gBAAqE,CAEnN,MAAA,kBAAoB,IAAI,IAAI,SAAS,IAAS,GAAA,EAAE,CAAC,CAAC,CAAC,EACtD,GAAA,kBAAkB,KAAO,IACpB,MAAA,IAAI,MAAM,uDAAuD,EAEzE,MAAM,SAAW,IAAI,IAAI,kBAAkB,OAAO,EAAE,IAAI,GAAK,MAAM,gBAAgB,CAAC,CAAC,CAAC,EAChF,WAAa,IAAI,WAAW,SAAU,UAAU,EAEtD,QAAQ,EAAI,EAAG,EAAI,SAAS,OAAQ,IAE/B,GADO,UAAA,mBAAmB,SAAS,CAAC,CAAC,EACrC,EAAI,oBAAsB,EAAG,CACxB,MAAA,MAAQ,UAAU,cACb,WAAA,SAAS,MAAO,UAAU,EACnB,uCAAA,EAAG,SAAS,OAChC,CAGF,kBAAW,SAAS,UAAU,YAAY,EAAG,GAAI,EAC1C,WAAW,UACpB,CApBgB,8BCQT,MAAM,kBAAwC,CACnD,UAAU,SAAsB,SAAkB,CAEhD,MAAM,QADkB,IAAI,gBAAgB,IAAK,GAAG,EACpB,WAAW,KAAM,CAAC,mBAAoB,GAAK,EAC3E,GAAG,CAAC,QAAe,MAAA,IAAI,MAAM,0BAA0B,EACjD,MAAA,UAAY,IAAI,uBAAuB,OAAO,EAE9C,WAAa,GACb,WAAa,KAAK,KAAK,SAAW,UAAU,EAC5C,kBAAoB,KAAK,IAAI,EAAE,KAAK,MAAM,SAAS,OAAS,UAAU,CAAC,EAGtE,OADK,UAAU,UAAW,SAAU,kBAAmB,WAAY,WAAY,CAAC,WAAY,cAAgB,OAAO,KAAK,gBAAiB,WAAY,WAAW,CAAC,CAE1K,CACF,EAGM,OAAS,IAAI,YAAoD,iBAAiB","x_google_ignoreList":[1]}